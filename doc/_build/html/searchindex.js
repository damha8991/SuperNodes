Search.setIndex({"docnames": ["API Reference (classes)", "Examples", "datanodes.nodes.DataNode", "datanodes.nodes.DataNode.append", "datanodes.nodes.DataNode.find_node", "datanodes.nodes.DataNode.find_nodes", "datanodes.nodes.DataNode.from_df", "datanodes.nodes.DataNode.from_node_dict", "datanodes.nodes.DataNode.from_yaml", "datanodes.nodes.DataNode.get_attributes", "datanodes.nodes.DataNode.get_child_from_name", "datanodes.nodes.DataNode.get_children_names", "datanodes.nodes.DataNode.has_children", "datanodes.nodes.DataNode.insert", "datanodes.nodes.DataNode.run_as_binary_tree", "datanodes.nodes.DataNode.split", "datanodes.nodes.DataNode.split_on_df_column", "datanodes.nodes.DataNode.to_df", "datanodes.nodes.DataNode.to_list", "datanodes.nodes.DataNode.to_node_dict", "datanodes.nodes.DataNode.to_str", "datanodes.nodes.DataNode.to_yaml", "datanodes.operations.InEquality", "index", "methods"], "filenames": ["API Reference (classes).rst", "Examples.rst", "datanodes.nodes.DataNode.rst", "datanodes.nodes.DataNode.append.rst", "datanodes.nodes.DataNode.find_node.rst", "datanodes.nodes.DataNode.find_nodes.rst", "datanodes.nodes.DataNode.from_df.rst", "datanodes.nodes.DataNode.from_node_dict.rst", "datanodes.nodes.DataNode.from_yaml.rst", "datanodes.nodes.DataNode.get_attributes.rst", "datanodes.nodes.DataNode.get_child_from_name.rst", "datanodes.nodes.DataNode.get_children_names.rst", "datanodes.nodes.DataNode.has_children.rst", "datanodes.nodes.DataNode.insert.rst", "datanodes.nodes.DataNode.run_as_binary_tree.rst", "datanodes.nodes.DataNode.split.rst", "datanodes.nodes.DataNode.split_on_df_column.rst", "datanodes.nodes.DataNode.to_df.rst", "datanodes.nodes.DataNode.to_list.rst", "datanodes.nodes.DataNode.to_node_dict.rst", "datanodes.nodes.DataNode.to_str.rst", "datanodes.nodes.DataNode.to_yaml.rst", "datanodes.operations.InEquality.rst", "index.rst", "methods.rst"], "titles": ["API Reference (classes)", "Examples", "DataNode", "DataNode.append", "DataNode.find_node", "DataNode.find_nodes", "DataNode.from_df", "DataNode.from_node_dict", "DataNode.from_yaml", "DataNode.get_attributes", "DataNode.get_child_from_name", "DataNode.get_children_names", "DataNode.has_children", "DataNode.insert", "DataNode.run_as_binary_tree", "DataNode.split", "DataNode.split_on_df_column", "DataNode.to_df", "DataNode.to_list", "DataNode.to_node_dict", "DataNode.to_str", "DataNode.to_yaml", "InEquality", "DataNodes", "methods"], "terms": {"here": [0, 1, 2], "you": [0, 1, 2, 23], "can": [0, 1, 2, 14, 23], "find": [0, 1, 23], "us": [0, 1, 2, 14, 15, 22, 24], "thi": [0, 2, 11, 14, 17, 18, 22, 23], "packag": [0, 1, 23], "datanod": [0, 22, 24], "inequ": [0, 2, 23], "some": 1, "method": [1, 6, 18, 23], "class": [2, 22, 23], "node": [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "name": [2, 5, 6, 7, 8, 10, 11, 14, 15, 16, 17, 18, 22, 23, 24], "option": [2, 10, 15], "union": [2, 3, 10], "str": [2, 5, 8, 10, 11, 20, 21, 22], "int": [2, 5, 10, 11, 13, 15], "hashabl": [2, 5, 10, 11], "none": [2, 4, 5, 10, 15, 17, 18], "valu": [2, 3, 5, 6, 7, 8, 13, 15, 16, 17, 22, 24], "ani": [2, 3, 4, 5, 13], "id": [2, 4, 7, 8, 15], "children": [2, 11, 12, 13, 14, 15, 16, 23, 24], "list": [2, 5, 11, 13, 15, 16, 17, 18, 22], "function": [2, 5, 14, 15, 22, 23], "callabl": [2, 5], "child_name_if_tru": [2, 14, 22, 23], "child_name_if_fals": [2, 14, 22, 23], "other_attr": [2, 5, 15], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "base": [2, 14, 16, 22], "object": [2, 3, 7, 8, 13, 22], "A": 2, "creat": [2, 3, 6, 7, 8, 13, 14, 15, 17, 24], "tree": [2, 6, 14, 17, 18, 22, 24], "data": [2, 23], "structur": [2, 23], "The": [2, 3, 4, 7, 8, 13, 15, 16, 17, 23], "type": [2, 5, 11, 12, 14, 15, 16, 17, 18, 19, 20], "default": [2, 15, 17], "store": [2, 23], "an": [2, 22, 23], "attribut": [2, 4, 7, 8, 14, 15, 16, 17, 23], "should": [2, 7, 8, 15], "uniqu": [2, 16], "everi": 2, "whole": 2, "have": [2, 7, 8, 10], "same": [2, 7, 8, 14, 15], "addit": 2, "dict": [2, 7, 19], "call": 2, "when": [2, 22], "run": [2, 14, 22, 23], "decis": [2, 14, 22], "also": 2, "string": [2, 20, 22, 23], "For": [2, 23], "exampl": [2, 6, 16, 22], "x": [2, 14, 22, 23], "10": [2, 14, 22, 23], "1": [2, 6, 16, 22, 23, 24], "9": [2, 22], "slice": [2, 22], "i": [2, 3, 7, 8, 13, 14, 15, 18, 22, 23], "current": [2, 17, 18], "support": [2, 22], "If": [2, 3, 10, 13, 14, 15, 17], "wa": [2, 10], "binari": [2, 14, 22], "determin": 2, "which": 2, "child": [2, 3, 4, 10, 13, 14, 16, 22, 23, 24], "chosen": 2, "next": [2, 14], "return": [2, 4, 5, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20], "true": [2, 9, 14, 17, 22], "see": 2, "run_as_binary_tre": [2, 22, 23], "more": 2, "inform": 2, "specifi": [2, 4, 5, 10, 13, 15], "fals": [2, 14, 22], "import": [2, 6, 16, 22, 23, 24], "from": [2, 6, 7, 8, 10, 15, 17, 18, 22, 23, 24], "make": 2, "simpl": 2, "main": [2, 14, 22], "30": 2, "0": [2, 22, 24], "chang": 2, "new": [2, 3, 13], "ad": [2, 23], "child_1": [2, 23, 24], "child_2": [2, 23, 24], "2": [2, 6, 15, 16, 23, 24], "append": [2, 23, 24], "__": [2, 6, 16], "find_nod": 2, "from_df": 2, "from_node_dict": 2, "from_yaml": 2, "get_attribut": 2, "get_child_from_nam": 2, "get_children_nam": 2, "has_children": 2, "insert": [2, 24], "split": [2, 16, 23, 24], "split_on_df_column": [2, 6, 24], "to_df": 2, "to_list": 2, "to_node_dict": 2, "to_str": 2, "to_yaml": 2, "add": [3, 13, 23], "paramet": [3, 4, 5, 6, 7, 8, 10, 13, 14, 15, 16, 17, 21, 23], "descend": [4, 5, 19, 20], "ha": [4, 12, 14], "match": 5, "criteria": 5, "df": [6, 16, 17, 24], "panda": [6, 16, 17, 24], "datafram": [6, 16, 17, 24], "It": [6, 14, 23], "appli": 6, "each": [6, 15, 16, 17, 18], "column": [6, 16, 17, 24], "pd": [6, 16, 24], "row": [6, 16, 18], "dictionari": [7, 19, 23], "kei": [7, 8], "ar": [7, 8, 11, 17, 24], "e": [7, 8], "etc": [7, 8, 14], "file_path": [8, 21], "yaml": [8, 21], "file": [8, 21], "path": [8, 18, 21], "none_attr": 9, "get": 10, "its": [10, 14, 19, 20], "found": 10, "all": 11, "directli": 11, "under": [11, 17, 23], "check": 12, "bool": [12, 17], "index": [13, 23, 24], "befor": 13, "kwarg": 14, "choos": 14, "one": 14, "": 14, "output": [14, 23], "whose": 14, "main_nod": [14, 22], "first": [14, 22, 23], "second": [14, 22, 23], "leaf": [14, 18, 23], "11": [14, 23], "keyword": 14, "argument": 14, "insid": [14, 23], "accept": 14, "either": 14, "num": [15, 23, 24], "other_attrs_list": 15, "number": [15, 16], "Its": 15, "length": 15, "new_children": 15, "depend": 16, "One": 16, "ignore_first": 17, "attr": [17, 18], "layer": 17, "beneath": 17, "becom": 17, "header": 17, "includ": [17, 22], "convert": [18, 19, 20, 21], "arr": 18, "consist": 18, "oper": [22, 24], "strings_to_numb": 22, "help": 22, "7": 22, "y": 22, "01": 22, "20": 22, "note": 22, "yet": 22, "two": 22, "variabl": 22, "100": 22, "101": 22, "nonetyp": 22, "python": 23, "easili": 23, "design": 23, "similar": 23, "As": 23, "both": 23, "command": 23, "pip": 23, "To": 23, "root": [23, 24], "root_nod": 23, "differ": [23, 24], "view": 23, "Then": 23, "link": 23, "doc": 23, "c": 23, "2023": 23, "mubarak": 23, "almehairbi": 23, "mit": 23, "api": 23, "refer": 23, "wai": 24, "present": 24, "below": 24, "3": 24, "4": 24, "5": 24, "6": 24}, "objects": {"datanodes.nodes": [[2, 0, 1, "", "DataNode"]], "datanodes.nodes.DataNode": [[3, 1, 1, "", "append"], [2, 2, 1, "", "child_name_if_false"], [2, 2, 1, "", "child_name_if_true"], [2, 2, 1, "", "children"], [4, 1, 1, "", "find_node"], [5, 1, 1, "", "find_nodes"], [6, 1, 1, "", "from_df"], [7, 1, 1, "", "from_node_dict"], [8, 1, 1, "", "from_yaml"], [2, 2, 1, "", "function"], [9, 1, 1, "", "get_attributes"], [10, 1, 1, "", "get_child_from_name"], [11, 1, 1, "", "get_children_names"], [12, 1, 1, "", "has_children"], [2, 2, 1, "", "id"], [13, 1, 1, "", "insert"], [2, 2, 1, "", "name"], [2, 2, 1, "", "other_attrs"], [14, 1, 1, "", "run_as_binary_tree"], [15, 1, 1, "", "split"], [16, 1, 1, "", "split_on_df_column"], [17, 1, 1, "", "to_df"], [18, 1, 1, "", "to_list"], [19, 1, 1, "", "to_node_dict"], [20, 1, 1, "", "to_str"], [21, 1, 1, "", "to_yaml"], [2, 2, 1, "", "value"]], "datanodes.operations": [[22, 0, 1, "", "InEquality"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:attribute"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "attribute", "Python attribute"]}, "titleterms": {"api": 0, "refer": 0, "class": 0, "exampl": [1, 23], "datanod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23], "method": [2, 24], "append": 3, "find_nod": [4, 5], "from_df": 6, "from_node_dict": 7, "from_yaml": 8, "get_attribut": 9, "get_child_from_nam": 10, "get_children_nam": 11, "has_children": 12, "insert": 13, "run_as_binary_tre": 14, "split": 15, "split_on_df_column": 16, "to_df": 17, "to_list": 18, "to_node_dict": 19, "to_str": 20, "to_yaml": 21, "inequ": 22, "overview": 23, "how": 23, "instal": 23, "creat": 23, "tree": 23, "us": 23, "decis": 23, "document": 23, "more": 23, "licens": 23, "copyright": 23, "tabl": 23, "content": 23}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.todo": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"API Reference (classes)": [[0, "api-reference-classes"]], "Examples": [[1, "examples"]], "DataNode": [[2, "datanode"]], "Methods": [[2, "methods"]], "DataNode.append": [[3, "datanode-append"]], "DataNode.find_node": [[4, "datanode-find-node"]], "DataNode.find_nodes": [[5, "datanode-find-nodes"]], "DataNode.from_df": [[6, "datanode-from-df"]], "DataNode.from_node_dict": [[7, "datanode-from-node-dict"]], "DataNode.from_yaml": [[8, "datanode-from-yaml"]], "DataNode.get_attributes": [[9, "datanode-get-attributes"]], "DataNode.get_child_from_name": [[10, "datanode-get-child-from-name"]], "DataNode.get_children_names": [[11, "datanode-get-children-names"]], "DataNode.has_children": [[12, "datanode-has-children"]], "DataNode.insert": [[13, "datanode-insert"]], "DataNode.run_as_binary_tree": [[14, "datanode-run-as-binary-tree"]], "DataNode.split": [[15, "datanode-split"]], "DataNode.split_on_df_column": [[16, "datanode-split-on-df-column"]], "DataNode.to_df": [[17, "datanode-to-df"]], "DataNode.to_list": [[18, "datanode-to-list"]], "DataNode.to_node_dict": [[19, "datanode-to-node-dict"]], "DataNode.to_str": [[20, "datanode-to-str"]], "DataNode.to_yaml": [[21, "datanode-to-yaml"]], "InEquality": [[22, "inequality"]], "DataNodes": [[23, "datanodes"]], "Overview": [[23, "overview"]], "How to install": [[23, "how-to-install"]], "How to create a tree": [[23, "how-to-create-a-tree"]], "How to use as a decision tree": [[23, "how-to-use-as-a-decision-tree"]], "Documentation": [[23, "documentation"]], "More examples": [[23, "more-examples"]], "License and Copyrights": [[23, "license-and-copyrights"]], "Table of contents": [[23, "table-of-contents"]], "methods": [[24, "methods"]]}, "indexentries": {"datanode (class in datanodes.nodes)": [[2, "datanodes.nodes.DataNode"]], "child_name_if_false (datanodes.nodes.datanode attribute)": [[2, "datanodes.nodes.DataNode.child_name_if_false"]], "child_name_if_true (datanodes.nodes.datanode attribute)": [[2, "datanodes.nodes.DataNode.child_name_if_true"]], "children (datanodes.nodes.datanode attribute)": [[2, "datanodes.nodes.DataNode.children"]], "function (datanodes.nodes.datanode attribute)": [[2, "datanodes.nodes.DataNode.function"]], "id (datanodes.nodes.datanode attribute)": [[2, "datanodes.nodes.DataNode.id"]], "name (datanodes.nodes.datanode attribute)": [[2, "datanodes.nodes.DataNode.name"]], "other_attrs (datanodes.nodes.datanode attribute)": [[2, "datanodes.nodes.DataNode.other_attrs"]], "value (datanodes.nodes.datanode attribute)": [[2, "datanodes.nodes.DataNode.value"]], "append() (datanodes.nodes.datanode method)": [[3, "datanodes.nodes.DataNode.append"]], "find_node() (datanodes.nodes.datanode method)": [[4, "datanodes.nodes.DataNode.find_node"]], "find_nodes() (datanodes.nodes.datanode method)": [[5, "datanodes.nodes.DataNode.find_nodes"]], "from_df() (datanodes.nodes.datanode method)": [[6, "datanodes.nodes.DataNode.from_df"]], "from_node_dict() (datanodes.nodes.datanode method)": [[7, "datanodes.nodes.DataNode.from_node_dict"]], "from_yaml() (datanodes.nodes.datanode method)": [[8, "datanodes.nodes.DataNode.from_yaml"]], "get_attributes() (datanodes.nodes.datanode method)": [[9, "datanodes.nodes.DataNode.get_attributes"]], "get_child_from_name() (datanodes.nodes.datanode method)": [[10, "datanodes.nodes.DataNode.get_child_from_name"]], "get_children_names() (datanodes.nodes.datanode method)": [[11, "datanodes.nodes.DataNode.get_children_names"]], "has_children() (datanodes.nodes.datanode method)": [[12, "datanodes.nodes.DataNode.has_children"]], "insert() (datanodes.nodes.datanode method)": [[13, "datanodes.nodes.DataNode.insert"]], "run_as_binary_tree() (datanodes.nodes.datanode method)": [[14, "datanodes.nodes.DataNode.run_as_binary_tree"]], "split() (datanodes.nodes.datanode method)": [[15, "datanodes.nodes.DataNode.split"]], "split_on_df_column() (datanodes.nodes.datanode method)": [[16, "datanodes.nodes.DataNode.split_on_df_column"]], "to_df() (datanodes.nodes.datanode method)": [[17, "datanodes.nodes.DataNode.to_df"]], "to_list() (datanodes.nodes.datanode method)": [[18, "datanodes.nodes.DataNode.to_list"]], "to_node_dict() (datanodes.nodes.datanode method)": [[19, "datanodes.nodes.DataNode.to_node_dict"]], "to_str() (datanodes.nodes.datanode method)": [[20, "datanodes.nodes.DataNode.to_str"]], "to_yaml() (datanodes.nodes.datanode method)": [[21, "datanodes.nodes.DataNode.to_yaml"]], "inequality (class in datanodes.operations)": [[22, "datanodes.operations.InEquality"]]}})