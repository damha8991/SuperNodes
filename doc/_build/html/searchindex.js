Search.setIndex({"docnames": ["Classes", "index", "pythontrees.nodes.DataNode", "pythontrees.nodes.DataNode.append", "pythontrees.nodes.DataNode.find_node", "pythontrees.nodes.DataNode.find_nodes", "pythontrees.nodes.DataNode.from_df", "pythontrees.nodes.DataNode.from_node_dict", "pythontrees.nodes.DataNode.from_yaml", "pythontrees.nodes.DataNode.get_child_from_name", "pythontrees.nodes.DataNode.get_children_names", "pythontrees.nodes.DataNode.has_children", "pythontrees.nodes.DataNode.insert", "pythontrees.nodes.DataNode.run_as_binary_tree", "pythontrees.nodes.DataNode.split", "pythontrees.nodes.DataNode.split_on_df_column", "pythontrees.nodes.DataNode.to_df", "pythontrees.nodes.DataNode.to_list", "pythontrees.nodes.DataNode.to_node_dict", "pythontrees.nodes.DataNode.to_str", "pythontrees.nodes.DataNode.to_yaml", "pythontrees.operations.InEquality"], "filenames": ["Classes.rst", "index.rst", "pythontrees.nodes.DataNode.rst", "pythontrees.nodes.DataNode.append.rst", "pythontrees.nodes.DataNode.find_node.rst", "pythontrees.nodes.DataNode.find_nodes.rst", "pythontrees.nodes.DataNode.from_df.rst", "pythontrees.nodes.DataNode.from_node_dict.rst", "pythontrees.nodes.DataNode.from_yaml.rst", "pythontrees.nodes.DataNode.get_child_from_name.rst", "pythontrees.nodes.DataNode.get_children_names.rst", "pythontrees.nodes.DataNode.has_children.rst", "pythontrees.nodes.DataNode.insert.rst", "pythontrees.nodes.DataNode.run_as_binary_tree.rst", "pythontrees.nodes.DataNode.split.rst", "pythontrees.nodes.DataNode.split_on_df_column.rst", "pythontrees.nodes.DataNode.to_df.rst", "pythontrees.nodes.DataNode.to_list.rst", "pythontrees.nodes.DataNode.to_node_dict.rst", "pythontrees.nodes.DataNode.to_str.rst", "pythontrees.nodes.DataNode.to_yaml.rst", "pythontrees.operations.InEquality.rst"], "titles": ["Classes", "PythonTrees", "DataNode", "DataNode.append", "DataNode.find_node", "DataNode.find_nodes", "DataNode.from_df", "DataNode.from_node_dict", "DataNode.from_yaml", "DataNode.get_child_from_name", "DataNode.get_children_names", "DataNode.has_children", "DataNode.insert", "DataNode.run_as_binary_tree", "DataNode.split", "DataNode.split_on_df_column", "DataNode.to_df", "DataNode.to_list", "DataNode.to_node_dict", "DataNode.to_str", "DataNode.to_yaml", "InEquality"], "terms": {"datanod": 0, "inequ": [0, 2], "class": [1, 2, 21], "pythontre": [2, 21], "node": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "name": [2, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17], "type": [2, 5, 10, 11, 13, 14, 15, 16, 17, 18, 19], "option": [2, 9, 14], "union": [2, 3, 9], "str": [2, 5, 8, 9, 10, 19, 20, 21], "int": [2, 5, 9, 10, 12, 14], "hashabl": [2, 5, 9, 10], "none": [2, 4, 5, 9, 14, 16], "valu": [2, 3, 5, 6, 7, 8, 12, 13, 14, 15, 16], "ani": [2, 3, 4, 5, 12], "id": [2, 4, 7, 8, 14], "attr": [2, 5, 14], "dict": [2, 5, 7, 18], "factori": 2, "children": [2, 10, 11, 12, 13, 14, 15], "list": [2, 5, 10, 12, 14, 15, 16, 17], "function": [2, 5, 13, 14], "callabl": [2, 5], "child_name_if_tru": [2, 13], "child_name_if_fals": [2, 13], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "base": [2, 13, 15, 21], "object": [2, 3, 7, 8, 12, 21], "A": 2, "us": [2, 13, 14], "creat": [2, 3, 6, 7, 8, 12, 13, 14, 16], "tree": [2, 6, 13, 16, 17], "data": 2, "structur": 2, "The": [2, 3, 4, 7, 8, 12, 14, 15, 16], "default": [2, 14, 16], "store": 2, "an": [2, 21], "attribut": [2, 4, 7, 8, 13, 14, 15, 16], "should": [2, 7, 8, 14], "uniqu": [2, 15], "everi": 2, "whole": 2, "have": [2, 7, 8, 9], "same": [2, 7, 8, 13, 14], "here": 2, "you": 2, "can": [2, 13], "addit": 2, "call": 2, "when": 2, "run": [2, 13, 21], "decis": [2, 13], "thi": [2, 10, 13, 16, 17], "also": 2, "string": [2, 19, 21], "exampl": [2, 6, 15, 21], "x": [2, 13, 21], "10": [2, 13, 21], "If": [2, 3, 9, 12, 13, 14, 16], "wa": [2, 9], "binari": [2, 13], "determin": 2, "which": 2, "child": [2, 3, 4, 9, 12, 13, 15], "chosen": 2, "next": [2, 13], "return": [2, 4, 5, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19], "i": [2, 3, 7, 8, 12, 13, 14, 17], "true": [2, 13, 16, 21], "child_if_tru": 2, "see": 2, "run_as_binary_tre": 2, "more": 2, "inform": 2, "specifi": [2, 4, 5, 9, 12, 14], "chose": 2, "fals": [2, 13, 21], "import": [2, 6, 15], "from": [2, 6, 7, 8, 9, 14, 16, 17, 21], "make": 2, "simpl": 2, "main": [2, 13], "30": 2, "0": 2, "chang": 2, "new": [2, 3, 12], "ad": 2, "child_1": 2, "1": [2, 6, 15], "child_2": 2, "2": [2, 6, 14, 15], "append": 2, "__": [2, 6, 15], "nonetyp": [2, 6, 13, 15], "find_nod": 2, "from_df": 2, "from_node_dict": 2, "from_yaml": 2, "get_child_from_nam": 2, "get_children_nam": 2, "has_children": 2, "insert": 2, "split": [2, 15], "split_on_df_column": [2, 6], "to_df": 2, "to_list": 2, "to_node_dict": 2, "to_str": 2, "to_yaml": 2, "add": [3, 12], "paramet": [3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 20], "descend": [4, 5, 18, 19], "ha": [4, 11, 13], "match": 5, "criteria": 5, "df": [6, 15, 16], "panda": [6, 15, 16], "datafram": [6, 15, 16], "It": [6, 13], "appli": 6, "method": [6, 17], "each": [6, 15, 16, 17], "column": [6, 15, 16], "pd": [6, 15], "row": [6, 15, 17], "dictionari": [7, 18], "kei": [7, 8], "ar": [7, 8, 10, 16], "e": [7, 8], "etc": [7, 8, 13], "file_path": [8, 20], "yaml": [8, 20], "file": [8, 20], "path": [8, 17, 20], "get": 9, "its": [9, 13, 18, 19], "found": 9, "all": 10, "directli": 10, "under": [10, 16], "check": 11, "bool": [11, 16], "index": 12, "befor": 12, "kwarg": 13, "choos": 13, "one": 13, "": 13, "output": 13, "whose": 13, "main_nod": 13, "first": 13, "second": 13, "leaf": [13, 17], "11": 13, "keyword": 13, "argument": 13, "insid": 13, "accept": 13, "either": 13, "num": 14, "attrs_list": 14, "number": [14, 15], "Its": 14, "length": 14, "new_children": 14, "depend": 15, "One": 15, "ignore_first": 16, "layer": 16, "beneath": 16, "becom": 16, "header": 16, "current": [16, 17], "includ": 16, "convert": [17, 18, 19, 20], "arr": 17, "consist": 17, "oper": 21, "strings_to_numb": 21, "7": 21, "y": 21, "9": 21, "01": 21}, "objects": {"pythontrees.nodes": [[2, 0, 1, "", "DataNode"]], "pythontrees.nodes.DataNode": [[3, 1, 1, "", "append"], [2, 2, 1, "", "attrs"], [2, 2, 1, "", "child_name_if_false"], [2, 2, 1, "", "child_name_if_true"], [2, 2, 1, "", "children"], [4, 1, 1, "", "find_node"], [5, 1, 1, "", "find_nodes"], [6, 1, 1, "", "from_df"], [7, 1, 1, "", "from_node_dict"], [8, 1, 1, "", "from_yaml"], [2, 2, 1, "", "function"], [9, 1, 1, "", "get_child_from_name"], [10, 1, 1, "", "get_children_names"], [11, 1, 1, "", "has_children"], [2, 2, 1, "", "id"], [12, 1, 1, "", "insert"], [2, 2, 1, "", "name"], [13, 1, 1, "", "run_as_binary_tree"], [14, 1, 1, "", "split"], [15, 1, 1, "", "split_on_df_column"], [16, 1, 1, "", "to_df"], [17, 1, 1, "", "to_list"], [18, 1, 1, "", "to_node_dict"], [19, 1, 1, "", "to_str"], [20, 1, 1, "", "to_yaml"], [2, 2, 1, "", "value"]], "pythontrees.operations": [[21, 0, 1, "", "InEquality"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:attribute"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "attribute", "Python attribute"]}, "titleterms": {"class": 0, "pythontre": 1, "content": 1, "datanod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "method": [2, 21], "append": 3, "find_nod": [4, 5], "from_df": 6, "from_node_dict": 7, "from_yaml": 8, "get_child_from_nam": 9, "get_children_nam": 10, "has_children": 11, "insert": 12, "run_as_binary_tre": 13, "split": 14, "split_on_df_column": 15, "to_df": 16, "to_list": 17, "to_node_dict": 18, "to_str": 19, "to_yaml": 20, "inequ": 21}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"Classes": [[0, "classes"]], "PythonTrees": [[1, "pythontrees"]], "Contents:": [[1, null]], "DataNode": [[2, "datanode"]], "Methods": [[2, "methods"], [21, "methods"]], "DataNode.append": [[3, "datanode-append"]], "DataNode.find_node": [[4, "datanode-find-node"]], "DataNode.find_nodes": [[5, "datanode-find-nodes"]], "DataNode.from_df": [[6, "datanode-from-df"]], "DataNode.from_node_dict": [[7, "datanode-from-node-dict"]], "DataNode.from_yaml": [[8, "datanode-from-yaml"]], "DataNode.get_child_from_name": [[9, "datanode-get-child-from-name"]], "DataNode.get_children_names": [[10, "datanode-get-children-names"]], "DataNode.has_children": [[11, "datanode-has-children"]], "DataNode.insert": [[12, "datanode-insert"]], "DataNode.run_as_binary_tree": [[13, "datanode-run-as-binary-tree"]], "DataNode.split": [[14, "datanode-split"]], "DataNode.split_on_df_column": [[15, "datanode-split-on-df-column"]], "DataNode.to_df": [[16, "datanode-to-df"]], "DataNode.to_list": [[17, "datanode-to-list"]], "DataNode.to_node_dict": [[18, "datanode-to-node-dict"]], "DataNode.to_str": [[19, "datanode-to-str"]], "DataNode.to_yaml": [[20, "datanode-to-yaml"]], "InEquality": [[21, "inequality"]]}, "indexentries": {"datanode (class in pythontrees.nodes)": [[2, "pythontrees.nodes.DataNode"]], "attrs (pythontrees.nodes.datanode attribute)": [[2, "pythontrees.nodes.DataNode.attrs"]], "child_name_if_false (pythontrees.nodes.datanode attribute)": [[2, "pythontrees.nodes.DataNode.child_name_if_false"]], "child_name_if_true (pythontrees.nodes.datanode attribute)": [[2, "pythontrees.nodes.DataNode.child_name_if_true"]], "children (pythontrees.nodes.datanode attribute)": [[2, "pythontrees.nodes.DataNode.children"]], "function (pythontrees.nodes.datanode attribute)": [[2, "pythontrees.nodes.DataNode.function"]], "id (pythontrees.nodes.datanode attribute)": [[2, "pythontrees.nodes.DataNode.id"]], "name (pythontrees.nodes.datanode attribute)": [[2, "pythontrees.nodes.DataNode.name"]], "value (pythontrees.nodes.datanode attribute)": [[2, "pythontrees.nodes.DataNode.value"]], "append() (pythontrees.nodes.datanode method)": [[3, "pythontrees.nodes.DataNode.append"]], "find_node() (pythontrees.nodes.datanode method)": [[4, "pythontrees.nodes.DataNode.find_node"]], "find_nodes() (pythontrees.nodes.datanode method)": [[5, "pythontrees.nodes.DataNode.find_nodes"]], "from_df() (pythontrees.nodes.datanode method)": [[6, "pythontrees.nodes.DataNode.from_df"]], "from_node_dict() (pythontrees.nodes.datanode method)": [[7, "pythontrees.nodes.DataNode.from_node_dict"]], "from_yaml() (pythontrees.nodes.datanode method)": [[8, "pythontrees.nodes.DataNode.from_yaml"]], "get_child_from_name() (pythontrees.nodes.datanode method)": [[9, "pythontrees.nodes.DataNode.get_child_from_name"]], "get_children_names() (pythontrees.nodes.datanode method)": [[10, "pythontrees.nodes.DataNode.get_children_names"]], "has_children() (pythontrees.nodes.datanode method)": [[11, "pythontrees.nodes.DataNode.has_children"]], "insert() (pythontrees.nodes.datanode method)": [[12, "pythontrees.nodes.DataNode.insert"]], "run_as_binary_tree() (pythontrees.nodes.datanode method)": [[13, "pythontrees.nodes.DataNode.run_as_binary_tree"]], "split() (pythontrees.nodes.datanode method)": [[14, "pythontrees.nodes.DataNode.split"]], "split_on_df_column() (pythontrees.nodes.datanode method)": [[15, "pythontrees.nodes.DataNode.split_on_df_column"]], "to_df() (pythontrees.nodes.datanode method)": [[16, "pythontrees.nodes.DataNode.to_df"]], "to_list() (pythontrees.nodes.datanode method)": [[17, "pythontrees.nodes.DataNode.to_list"]], "to_node_dict() (pythontrees.nodes.datanode method)": [[18, "pythontrees.nodes.DataNode.to_node_dict"]], "to_str() (pythontrees.nodes.datanode method)": [[19, "pythontrees.nodes.DataNode.to_str"]], "to_yaml() (pythontrees.nodes.datanode method)": [[20, "pythontrees.nodes.DataNode.to_yaml"]], "inequality (class in pythontrees.operations)": [[21, "pythontrees.operations.InEquality"]]}})